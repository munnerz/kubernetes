/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-codegen.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_MinimumResourceVersion = map[string]string{
	"":                "MinimumResourceVersion contains information about a scopes validity within a particular store.",
	"storeID":         "The ID of the storage backend in the API server.",
	"resourceVersion": "ResourceVersion is the minimum supported resource version for this scope in the store.",
}

func (MinimumResourceVersion) SwaggerDoc() map[string]string {
	return map_MinimumResourceVersion
}

var map_Scope = map[string]string{
	"":         "Scope is a definition of a mapping between a scope (name, value) tuple and a list of namespace names. The metadata.namespace field is used to represent the scope name, and the metadata.name field is used to represent the scope value. For example, a Scope in the namespace 'workspace' with name 'my-workspace' would correspond to the scope selector `workspace=my-workspace`. A scopes generation field is used to uniquely identify a revision of a scope configuration.",
	"metadata": "Standard object's metadata. The name must be of the form `<scope-name>:<scope-value>`, for example: `workspaces:my-workspace`.",
	"spec":     "Specification of the Scope.",
	"status":   "Status of the Scope.",
}

func (Scope) SwaggerDoc() map[string]string {
	return map_Scope
}

var map_ScopeList = map[string]string{
	"":         "ScopeList is a collection of Scope objects.",
	"metadata": "Standard object's metadata.",
}

func (ScopeList) SwaggerDoc() map[string]string {
	return map_ScopeList
}

var map_ScopeSpec = map[string]string{
	"namespaces": "Namespaces is a list of static & explicit namespace names to be included in the scope.",
}

func (ScopeSpec) SwaggerDoc() map[string]string {
	return map_ScopeSpec
}

var map_ScopeStatus = map[string]string{
	"scopeID":                 "ScopeID is a unique identifier for this generation/epoch of mapping.",
	"namespaces":              "Namespaces is the final set of namespaces that are included within this scope.",
	"minimumResourceVersions": "MinimumResourceVersions are the minimum supported store resource versions for this scope, computed by finding the highest resourceVersion reported from an individual server that it most recently transitioned scopes between.",
	"serverScopeVersions":     "ServerScopeVersions contains an entry for each (apiServer, store) pair detailing the progress in the store when the last scope ID was applied.",
}

func (ScopeStatus) SwaggerDoc() map[string]string {
	return map_ScopeStatus
}

var map_ServerScopeVersion = map[string]string{
	"":                "ServerScopeVersion contains information on when a particular apiserver first began serving requests using a new mapping ID. This may not be the FIRST resourceVersion served using this mapping, however it's guaranteed to always be AFTER the mapping began to be served.",
	"apiServerID":     "The ID of the reporting API server.",
	"storeID":         "The ID of the storage backend in the API server. This should be consistent between different servers.",
	"scopeID":         "ScopeID is the generation of scope that this apiserver and store is recording progress for.",
	"resourceVersion": "ResourceVersion is the current resourceVersion of the store at a point at or after this generation of scope began to be used by this server.",
}

func (ServerScopeVersion) SwaggerDoc() map[string]string {
	return map_ServerScopeVersion
}

// AUTO-GENERATED FUNCTIONS END HERE
