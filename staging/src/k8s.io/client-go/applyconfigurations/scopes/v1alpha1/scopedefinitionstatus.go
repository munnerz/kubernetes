/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ScopeDefinitionStatusApplyConfiguration represents a declarative configuration of the ScopeDefinitionStatus type for use
// with apply.
type ScopeDefinitionStatusApplyConfiguration struct {
	ScopeID                 *string                                    `json:"scopeID,omitempty"`
	Namespaces              []string                                   `json:"namespaces,omitempty"`
	MinimumResourceVersions []MinimumResourceVersionApplyConfiguration `json:"minimumResourceVersions,omitempty"`
	ServerScopeVersions     []ServerScopeVersionApplyConfiguration     `json:"serverScopeVersions,omitempty"`
}

// ScopeDefinitionStatusApplyConfiguration constructs a declarative configuration of the ScopeDefinitionStatus type for use with
// apply.
func ScopeDefinitionStatus() *ScopeDefinitionStatusApplyConfiguration {
	return &ScopeDefinitionStatusApplyConfiguration{}
}

// WithScopeID sets the ScopeID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScopeID field is set to the value of the last call.
func (b *ScopeDefinitionStatusApplyConfiguration) WithScopeID(value string) *ScopeDefinitionStatusApplyConfiguration {
	b.ScopeID = &value
	return b
}

// WithNamespaces adds the given value to the Namespaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Namespaces field.
func (b *ScopeDefinitionStatusApplyConfiguration) WithNamespaces(values ...string) *ScopeDefinitionStatusApplyConfiguration {
	for i := range values {
		b.Namespaces = append(b.Namespaces, values[i])
	}
	return b
}

// WithMinimumResourceVersions adds the given value to the MinimumResourceVersions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MinimumResourceVersions field.
func (b *ScopeDefinitionStatusApplyConfiguration) WithMinimumResourceVersions(values ...*MinimumResourceVersionApplyConfiguration) *ScopeDefinitionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMinimumResourceVersions")
		}
		b.MinimumResourceVersions = append(b.MinimumResourceVersions, *values[i])
	}
	return b
}

// WithServerScopeVersions adds the given value to the ServerScopeVersions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServerScopeVersions field.
func (b *ScopeDefinitionStatusApplyConfiguration) WithServerScopeVersions(values ...*ServerScopeVersionApplyConfiguration) *ScopeDefinitionStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServerScopeVersions")
		}
		b.ServerScopeVersions = append(b.ServerScopeVersions, *values[i])
	}
	return b
}
