//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1alpha1 "k8s.io/api/scopes/v1alpha1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	scopes "k8s.io/kubernetes/pkg/apis/scopes"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*v1alpha1.MinimumResourceVersion)(nil), (*scopes.MinimumResourceVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(a.(*v1alpha1.MinimumResourceVersion), b.(*scopes.MinimumResourceVersion), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.MinimumResourceVersion)(nil), (*v1alpha1.MinimumResourceVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(a.(*scopes.MinimumResourceVersion), b.(*v1alpha1.MinimumResourceVersion), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ScopeDefinition)(nil), (*scopes.ScopeDefinition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScopeDefinition_To_scopes_ScopeDefinition(a.(*v1alpha1.ScopeDefinition), b.(*scopes.ScopeDefinition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ScopeDefinition)(nil), (*v1alpha1.ScopeDefinition)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ScopeDefinition_To_v1alpha1_ScopeDefinition(a.(*scopes.ScopeDefinition), b.(*v1alpha1.ScopeDefinition), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ScopeDefinitionList)(nil), (*scopes.ScopeDefinitionList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScopeDefinitionList_To_scopes_ScopeDefinitionList(a.(*v1alpha1.ScopeDefinitionList), b.(*scopes.ScopeDefinitionList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ScopeDefinitionList)(nil), (*v1alpha1.ScopeDefinitionList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ScopeDefinitionList_To_v1alpha1_ScopeDefinitionList(a.(*scopes.ScopeDefinitionList), b.(*v1alpha1.ScopeDefinitionList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ScopeDefinitionSpec)(nil), (*scopes.ScopeDefinitionSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScopeDefinitionSpec_To_scopes_ScopeDefinitionSpec(a.(*v1alpha1.ScopeDefinitionSpec), b.(*scopes.ScopeDefinitionSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ScopeDefinitionSpec)(nil), (*v1alpha1.ScopeDefinitionSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ScopeDefinitionSpec_To_v1alpha1_ScopeDefinitionSpec(a.(*scopes.ScopeDefinitionSpec), b.(*v1alpha1.ScopeDefinitionSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ScopeDefinitionStatus)(nil), (*scopes.ScopeDefinitionStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScopeDefinitionStatus_To_scopes_ScopeDefinitionStatus(a.(*v1alpha1.ScopeDefinitionStatus), b.(*scopes.ScopeDefinitionStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ScopeDefinitionStatus)(nil), (*v1alpha1.ScopeDefinitionStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ScopeDefinitionStatus_To_v1alpha1_ScopeDefinitionStatus(a.(*scopes.ScopeDefinitionStatus), b.(*v1alpha1.ScopeDefinitionStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ServerScopeVersion)(nil), (*scopes.ServerScopeVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(a.(*v1alpha1.ServerScopeVersion), b.(*scopes.ServerScopeVersion), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ServerScopeVersion)(nil), (*v1alpha1.ServerScopeVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(a.(*scopes.ServerScopeVersion), b.(*v1alpha1.ServerScopeVersion), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(in *v1alpha1.MinimumResourceVersion, out *scopes.MinimumResourceVersion, s conversion.Scope) error {
	out.StoreID = in.StoreID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion is an autogenerated conversion function.
func Convert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(in *v1alpha1.MinimumResourceVersion, out *scopes.MinimumResourceVersion, s conversion.Scope) error {
	return autoConvert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(in, out, s)
}

func autoConvert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(in *scopes.MinimumResourceVersion, out *v1alpha1.MinimumResourceVersion, s conversion.Scope) error {
	out.StoreID = in.StoreID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion is an autogenerated conversion function.
func Convert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(in *scopes.MinimumResourceVersion, out *v1alpha1.MinimumResourceVersion, s conversion.Scope) error {
	return autoConvert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(in, out, s)
}

func autoConvert_v1alpha1_ScopeDefinition_To_scopes_ScopeDefinition(in *v1alpha1.ScopeDefinition, out *scopes.ScopeDefinition, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ScopeDefinitionSpec_To_scopes_ScopeDefinitionSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ScopeDefinitionStatus_To_scopes_ScopeDefinitionStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_ScopeDefinition_To_scopes_ScopeDefinition is an autogenerated conversion function.
func Convert_v1alpha1_ScopeDefinition_To_scopes_ScopeDefinition(in *v1alpha1.ScopeDefinition, out *scopes.ScopeDefinition, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScopeDefinition_To_scopes_ScopeDefinition(in, out, s)
}

func autoConvert_scopes_ScopeDefinition_To_v1alpha1_ScopeDefinition(in *scopes.ScopeDefinition, out *v1alpha1.ScopeDefinition, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_scopes_ScopeDefinitionSpec_To_v1alpha1_ScopeDefinitionSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_scopes_ScopeDefinitionStatus_To_v1alpha1_ScopeDefinitionStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_scopes_ScopeDefinition_To_v1alpha1_ScopeDefinition is an autogenerated conversion function.
func Convert_scopes_ScopeDefinition_To_v1alpha1_ScopeDefinition(in *scopes.ScopeDefinition, out *v1alpha1.ScopeDefinition, s conversion.Scope) error {
	return autoConvert_scopes_ScopeDefinition_To_v1alpha1_ScopeDefinition(in, out, s)
}

func autoConvert_v1alpha1_ScopeDefinitionList_To_scopes_ScopeDefinitionList(in *v1alpha1.ScopeDefinitionList, out *scopes.ScopeDefinitionList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]scopes.ScopeDefinition)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1alpha1_ScopeDefinitionList_To_scopes_ScopeDefinitionList is an autogenerated conversion function.
func Convert_v1alpha1_ScopeDefinitionList_To_scopes_ScopeDefinitionList(in *v1alpha1.ScopeDefinitionList, out *scopes.ScopeDefinitionList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScopeDefinitionList_To_scopes_ScopeDefinitionList(in, out, s)
}

func autoConvert_scopes_ScopeDefinitionList_To_v1alpha1_ScopeDefinitionList(in *scopes.ScopeDefinitionList, out *v1alpha1.ScopeDefinitionList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]v1alpha1.ScopeDefinition)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_scopes_ScopeDefinitionList_To_v1alpha1_ScopeDefinitionList is an autogenerated conversion function.
func Convert_scopes_ScopeDefinitionList_To_v1alpha1_ScopeDefinitionList(in *scopes.ScopeDefinitionList, out *v1alpha1.ScopeDefinitionList, s conversion.Scope) error {
	return autoConvert_scopes_ScopeDefinitionList_To_v1alpha1_ScopeDefinitionList(in, out, s)
}

func autoConvert_v1alpha1_ScopeDefinitionSpec_To_scopes_ScopeDefinitionSpec(in *v1alpha1.ScopeDefinitionSpec, out *scopes.ScopeDefinitionSpec, s conversion.Scope) error {
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	return nil
}

// Convert_v1alpha1_ScopeDefinitionSpec_To_scopes_ScopeDefinitionSpec is an autogenerated conversion function.
func Convert_v1alpha1_ScopeDefinitionSpec_To_scopes_ScopeDefinitionSpec(in *v1alpha1.ScopeDefinitionSpec, out *scopes.ScopeDefinitionSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScopeDefinitionSpec_To_scopes_ScopeDefinitionSpec(in, out, s)
}

func autoConvert_scopes_ScopeDefinitionSpec_To_v1alpha1_ScopeDefinitionSpec(in *scopes.ScopeDefinitionSpec, out *v1alpha1.ScopeDefinitionSpec, s conversion.Scope) error {
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	return nil
}

// Convert_scopes_ScopeDefinitionSpec_To_v1alpha1_ScopeDefinitionSpec is an autogenerated conversion function.
func Convert_scopes_ScopeDefinitionSpec_To_v1alpha1_ScopeDefinitionSpec(in *scopes.ScopeDefinitionSpec, out *v1alpha1.ScopeDefinitionSpec, s conversion.Scope) error {
	return autoConvert_scopes_ScopeDefinitionSpec_To_v1alpha1_ScopeDefinitionSpec(in, out, s)
}

func autoConvert_v1alpha1_ScopeDefinitionStatus_To_scopes_ScopeDefinitionStatus(in *v1alpha1.ScopeDefinitionStatus, out *scopes.ScopeDefinitionStatus, s conversion.Scope) error {
	out.ScopeID = in.ScopeID
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	out.MinimumResourceVersions = *(*[]scopes.MinimumResourceVersion)(unsafe.Pointer(&in.MinimumResourceVersions))
	out.ServerScopeVersions = *(*[]scopes.ServerScopeVersion)(unsafe.Pointer(&in.ServerScopeVersions))
	return nil
}

// Convert_v1alpha1_ScopeDefinitionStatus_To_scopes_ScopeDefinitionStatus is an autogenerated conversion function.
func Convert_v1alpha1_ScopeDefinitionStatus_To_scopes_ScopeDefinitionStatus(in *v1alpha1.ScopeDefinitionStatus, out *scopes.ScopeDefinitionStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScopeDefinitionStatus_To_scopes_ScopeDefinitionStatus(in, out, s)
}

func autoConvert_scopes_ScopeDefinitionStatus_To_v1alpha1_ScopeDefinitionStatus(in *scopes.ScopeDefinitionStatus, out *v1alpha1.ScopeDefinitionStatus, s conversion.Scope) error {
	out.ScopeID = in.ScopeID
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	out.MinimumResourceVersions = *(*[]v1alpha1.MinimumResourceVersion)(unsafe.Pointer(&in.MinimumResourceVersions))
	out.ServerScopeVersions = *(*[]v1alpha1.ServerScopeVersion)(unsafe.Pointer(&in.ServerScopeVersions))
	return nil
}

// Convert_scopes_ScopeDefinitionStatus_To_v1alpha1_ScopeDefinitionStatus is an autogenerated conversion function.
func Convert_scopes_ScopeDefinitionStatus_To_v1alpha1_ScopeDefinitionStatus(in *scopes.ScopeDefinitionStatus, out *v1alpha1.ScopeDefinitionStatus, s conversion.Scope) error {
	return autoConvert_scopes_ScopeDefinitionStatus_To_v1alpha1_ScopeDefinitionStatus(in, out, s)
}

func autoConvert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(in *v1alpha1.ServerScopeVersion, out *scopes.ServerScopeVersion, s conversion.Scope) error {
	out.APIServerID = in.APIServerID
	out.StoreID = in.StoreID
	out.ScopeID = in.ScopeID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion is an autogenerated conversion function.
func Convert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(in *v1alpha1.ServerScopeVersion, out *scopes.ServerScopeVersion, s conversion.Scope) error {
	return autoConvert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(in, out, s)
}

func autoConvert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(in *scopes.ServerScopeVersion, out *v1alpha1.ServerScopeVersion, s conversion.Scope) error {
	out.APIServerID = in.APIServerID
	out.StoreID = in.StoreID
	out.ScopeID = in.ScopeID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion is an autogenerated conversion function.
func Convert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(in *scopes.ServerScopeVersion, out *v1alpha1.ServerScopeVersion, s conversion.Scope) error {
	return autoConvert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(in, out, s)
}
