//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1alpha1 "k8s.io/api/scopes/v1alpha1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	scopes "k8s.io/kubernetes/pkg/apis/scopes"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*v1alpha1.MinimumResourceVersion)(nil), (*scopes.MinimumResourceVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(a.(*v1alpha1.MinimumResourceVersion), b.(*scopes.MinimumResourceVersion), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.MinimumResourceVersion)(nil), (*v1alpha1.MinimumResourceVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(a.(*scopes.MinimumResourceVersion), b.(*v1alpha1.MinimumResourceVersion), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.Scope)(nil), (*scopes.Scope)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Scope_To_scopes_Scope(a.(*v1alpha1.Scope), b.(*scopes.Scope), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.Scope)(nil), (*v1alpha1.Scope)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_Scope_To_v1alpha1_Scope(a.(*scopes.Scope), b.(*v1alpha1.Scope), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ScopeList)(nil), (*scopes.ScopeList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScopeList_To_scopes_ScopeList(a.(*v1alpha1.ScopeList), b.(*scopes.ScopeList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ScopeList)(nil), (*v1alpha1.ScopeList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ScopeList_To_v1alpha1_ScopeList(a.(*scopes.ScopeList), b.(*v1alpha1.ScopeList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ScopeSpec)(nil), (*scopes.ScopeSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScopeSpec_To_scopes_ScopeSpec(a.(*v1alpha1.ScopeSpec), b.(*scopes.ScopeSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ScopeSpec)(nil), (*v1alpha1.ScopeSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ScopeSpec_To_v1alpha1_ScopeSpec(a.(*scopes.ScopeSpec), b.(*v1alpha1.ScopeSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ScopeStatus)(nil), (*scopes.ScopeStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ScopeStatus_To_scopes_ScopeStatus(a.(*v1alpha1.ScopeStatus), b.(*scopes.ScopeStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ScopeStatus)(nil), (*v1alpha1.ScopeStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ScopeStatus_To_v1alpha1_ScopeStatus(a.(*scopes.ScopeStatus), b.(*v1alpha1.ScopeStatus), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.ServerScopeVersion)(nil), (*scopes.ServerScopeVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(a.(*v1alpha1.ServerScopeVersion), b.(*scopes.ServerScopeVersion), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*scopes.ServerScopeVersion)(nil), (*v1alpha1.ServerScopeVersion)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(a.(*scopes.ServerScopeVersion), b.(*v1alpha1.ServerScopeVersion), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(in *v1alpha1.MinimumResourceVersion, out *scopes.MinimumResourceVersion, s conversion.Scope) error {
	out.StoreID = in.StoreID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion is an autogenerated conversion function.
func Convert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(in *v1alpha1.MinimumResourceVersion, out *scopes.MinimumResourceVersion, s conversion.Scope) error {
	return autoConvert_v1alpha1_MinimumResourceVersion_To_scopes_MinimumResourceVersion(in, out, s)
}

func autoConvert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(in *scopes.MinimumResourceVersion, out *v1alpha1.MinimumResourceVersion, s conversion.Scope) error {
	out.StoreID = in.StoreID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion is an autogenerated conversion function.
func Convert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(in *scopes.MinimumResourceVersion, out *v1alpha1.MinimumResourceVersion, s conversion.Scope) error {
	return autoConvert_scopes_MinimumResourceVersion_To_v1alpha1_MinimumResourceVersion(in, out, s)
}

func autoConvert_v1alpha1_Scope_To_scopes_Scope(in *v1alpha1.Scope, out *scopes.Scope, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ScopeSpec_To_scopes_ScopeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_ScopeStatus_To_scopes_ScopeStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Scope_To_scopes_Scope is an autogenerated conversion function.
func Convert_v1alpha1_Scope_To_scopes_Scope(in *v1alpha1.Scope, out *scopes.Scope, s conversion.Scope) error {
	return autoConvert_v1alpha1_Scope_To_scopes_Scope(in, out, s)
}

func autoConvert_scopes_Scope_To_v1alpha1_Scope(in *scopes.Scope, out *v1alpha1.Scope, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_scopes_ScopeSpec_To_v1alpha1_ScopeSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_scopes_ScopeStatus_To_v1alpha1_ScopeStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

// Convert_scopes_Scope_To_v1alpha1_Scope is an autogenerated conversion function.
func Convert_scopes_Scope_To_v1alpha1_Scope(in *scopes.Scope, out *v1alpha1.Scope, s conversion.Scope) error {
	return autoConvert_scopes_Scope_To_v1alpha1_Scope(in, out, s)
}

func autoConvert_v1alpha1_ScopeList_To_scopes_ScopeList(in *v1alpha1.ScopeList, out *scopes.ScopeList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]scopes.Scope)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1alpha1_ScopeList_To_scopes_ScopeList is an autogenerated conversion function.
func Convert_v1alpha1_ScopeList_To_scopes_ScopeList(in *v1alpha1.ScopeList, out *scopes.ScopeList, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScopeList_To_scopes_ScopeList(in, out, s)
}

func autoConvert_scopes_ScopeList_To_v1alpha1_ScopeList(in *scopes.ScopeList, out *v1alpha1.ScopeList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]v1alpha1.Scope)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_scopes_ScopeList_To_v1alpha1_ScopeList is an autogenerated conversion function.
func Convert_scopes_ScopeList_To_v1alpha1_ScopeList(in *scopes.ScopeList, out *v1alpha1.ScopeList, s conversion.Scope) error {
	return autoConvert_scopes_ScopeList_To_v1alpha1_ScopeList(in, out, s)
}

func autoConvert_v1alpha1_ScopeSpec_To_scopes_ScopeSpec(in *v1alpha1.ScopeSpec, out *scopes.ScopeSpec, s conversion.Scope) error {
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	return nil
}

// Convert_v1alpha1_ScopeSpec_To_scopes_ScopeSpec is an autogenerated conversion function.
func Convert_v1alpha1_ScopeSpec_To_scopes_ScopeSpec(in *v1alpha1.ScopeSpec, out *scopes.ScopeSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScopeSpec_To_scopes_ScopeSpec(in, out, s)
}

func autoConvert_scopes_ScopeSpec_To_v1alpha1_ScopeSpec(in *scopes.ScopeSpec, out *v1alpha1.ScopeSpec, s conversion.Scope) error {
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	return nil
}

// Convert_scopes_ScopeSpec_To_v1alpha1_ScopeSpec is an autogenerated conversion function.
func Convert_scopes_ScopeSpec_To_v1alpha1_ScopeSpec(in *scopes.ScopeSpec, out *v1alpha1.ScopeSpec, s conversion.Scope) error {
	return autoConvert_scopes_ScopeSpec_To_v1alpha1_ScopeSpec(in, out, s)
}

func autoConvert_v1alpha1_ScopeStatus_To_scopes_ScopeStatus(in *v1alpha1.ScopeStatus, out *scopes.ScopeStatus, s conversion.Scope) error {
	out.ScopeID = in.ScopeID
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	out.MinimumResourceVersions = *(*[]scopes.MinimumResourceVersion)(unsafe.Pointer(&in.MinimumResourceVersions))
	out.ServerScopeVersions = *(*[]scopes.ServerScopeVersion)(unsafe.Pointer(&in.ServerScopeVersions))
	return nil
}

// Convert_v1alpha1_ScopeStatus_To_scopes_ScopeStatus is an autogenerated conversion function.
func Convert_v1alpha1_ScopeStatus_To_scopes_ScopeStatus(in *v1alpha1.ScopeStatus, out *scopes.ScopeStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_ScopeStatus_To_scopes_ScopeStatus(in, out, s)
}

func autoConvert_scopes_ScopeStatus_To_v1alpha1_ScopeStatus(in *scopes.ScopeStatus, out *v1alpha1.ScopeStatus, s conversion.Scope) error {
	out.ScopeID = in.ScopeID
	out.Namespaces = *(*[]string)(unsafe.Pointer(&in.Namespaces))
	out.MinimumResourceVersions = *(*[]v1alpha1.MinimumResourceVersion)(unsafe.Pointer(&in.MinimumResourceVersions))
	out.ServerScopeVersions = *(*[]v1alpha1.ServerScopeVersion)(unsafe.Pointer(&in.ServerScopeVersions))
	return nil
}

// Convert_scopes_ScopeStatus_To_v1alpha1_ScopeStatus is an autogenerated conversion function.
func Convert_scopes_ScopeStatus_To_v1alpha1_ScopeStatus(in *scopes.ScopeStatus, out *v1alpha1.ScopeStatus, s conversion.Scope) error {
	return autoConvert_scopes_ScopeStatus_To_v1alpha1_ScopeStatus(in, out, s)
}

func autoConvert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(in *v1alpha1.ServerScopeVersion, out *scopes.ServerScopeVersion, s conversion.Scope) error {
	out.APIServerID = in.APIServerID
	out.StoreID = in.StoreID
	out.ScopeID = in.ScopeID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion is an autogenerated conversion function.
func Convert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(in *v1alpha1.ServerScopeVersion, out *scopes.ServerScopeVersion, s conversion.Scope) error {
	return autoConvert_v1alpha1_ServerScopeVersion_To_scopes_ServerScopeVersion(in, out, s)
}

func autoConvert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(in *scopes.ServerScopeVersion, out *v1alpha1.ServerScopeVersion, s conversion.Scope) error {
	out.APIServerID = in.APIServerID
	out.StoreID = in.StoreID
	out.ScopeID = in.ScopeID
	out.ResourceVersion = in.ResourceVersion
	return nil
}

// Convert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion is an autogenerated conversion function.
func Convert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(in *scopes.ServerScopeVersion, out *v1alpha1.ServerScopeVersion, s conversion.Scope) error {
	return autoConvert_scopes_ServerScopeVersion_To_v1alpha1_ServerScopeVersion(in, out, s)
}
